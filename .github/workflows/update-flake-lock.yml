name: Update Flake Lock

on:
  schedule:
    - cron: '0 23 * * 0' # Every Sunday at 11:00 PM
  workflow_dispatch:

jobs:
  check-build:
    uses: ./.github/workflows/build-template.yml
    with:
      template: 'starter'
      arch: 'x86_64-linux'

  update-flake:
    runs-on: ubuntu-latest
    needs: check-build
    steps:
      - name: Free disk space
        run: |
          echo "Disk usage before cleanup:"
          df -h

          cd /opt
          find . -maxdepth 1 -mindepth 1 '!' -path ./containerd '!' -path ./actionarchivecache '!' -path ./runner '!' -path ./runner-cache -exec rm -rf '{}' ';'
          
          # Remove large packages that exist
          packages_to_remove=(
            azure-cli
            google-chrome-stable
            firefox
            powershell
            mono-devel
          )
          
          for pkg in "${packages_to_remove[@]}"; do
            if dpkg -l | grep -q "^ii  $pkg "; then
              echo "Removing $pkg..."
              sudo apt-get remove -y "$pkg" || true
            fi
          done
          
          # Remove packages by pattern (ignore errors for missing packages)
          sudo apt-get remove -y '^ghc-.*' 2>/dev/null || true
          sudo apt-get remove -y '^dotnet-.*' 2>/dev/null || true  
          sudo apt-get remove -y '^llvm-.*' 2>/dev/null || true
          
          sudo apt-get autoremove -y
          sudo apt-get clean
          
          # Remove large directories
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/.ghcup
          sudo rm -rf /usr/share/swift
          
          echo "Disk usage after cleanup:"
          df -h

      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@master

      - name: Set up cache
        uses: nix-community/cache-nix-action@main
        with:
          primary-key: nix-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-${{ runner.arch }}

      # - name: Initalize flake
      #   run: |
      #     mkdir -p my-config && cd my-config
      #     nix flake --extra-experimental-features 'nix-command flakes' init -t github:slickag/nix-config#starter

      # - name: Apply CI User Info
      #   run: |
      #     # Set basic values for variables
      #     export USERNAME="ciuser"
      #     export GIT_EMAIL="ciuser@example.com"
      #     export GIT_NAME="CI User"
      #     export PRIMARY_IFACE="eth0"
      #     export HOST_NAME="ci-host"
      #     export BOOT_DISK="sda"

      #     # Function to replace tokens in each file
      #     replace_tokens() {
      #       local file="$1"
      #       if [[ $(basename "$file") != "apply" ]]; then
      #         sed -i -e "s/%USER%/$USERNAME/g" -e "s/%EMAIL%/$GIT_EMAIL/g" -e "s/%NAME%/$GIT_NAME/g" \
      #                -e "s/%INTERFACE%/$PRIMARY_IFACE/g" -e "s/%DISK%/$BOOT_DISK/g" -e "s/%HOST%/$HOST_NAME/g" "$file"
      #       fi
      #     }

      #     # Traverse directories and replace tokens in each Nix file
      #     export -f replace_tokens
      #     cd /home/runner/work/nix-config/nix-config/my-config
      #     find . -type f -exec bash -c 'replace_tokens "$0"' {} \;

      #     echo "$USERNAME" > /tmp/username.txt

      - name: Update flake.lock
        uses: DeterminateSystems/update-flake-lock@main
        with:
          token: ${{ secrets.GH_TOKEN_FOR_UPDATES }}
          pr-title: "Update flake.lock"
          pr-labels: |
            dependencies
            automated
